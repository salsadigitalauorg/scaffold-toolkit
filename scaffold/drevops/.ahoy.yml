#
# Version: 1.0.0
# Customized: false
#
# Ahoy configuration file.
# http://www.ahoycli.com/
#
# Provides development experience shortcuts to work with the stack.
# Any command can be copy-pasted directly into terminal and ran without using
# Ahoy.
#
# Do not add values directly into this file. Use .env file instead.
# Run `ahoy up cli` to apply environment variables changes to containers.
---
ahoyapi: v2

commands:

  build:
    usage: Build or rebuild the project.
    cmd: |
      ahoy reset
      docker compose up -d --build --force-recreate
      ahoy composer install --prefer-dist
      ahoy fei
      ahoy provision
      ahoy import-config-dev
      DREVOPS_SHOW_LOGIN=1 ahoy info

  info:
    usage: Show information about this project.
    cmd: |
      COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-${PWD##*/}} \
      DREVOPS_HOST_DB_PORT=$(docker compose port mariadb 3306 2>/dev/null | cut -d : -f 2) \
      DREVOPS_HOST_SOLR_PORT=$(docker compose port solr 8983 2>/dev/null | cut -d : -f 2) \
      DREVOPS_HOST_HAS_SEQUELACE=$(uname -a | grep -i -q darwin && mdfind -name 'Sequel Ace' 2>/dev/null | grep -q "Ace" && echo 1 || true) \
      ahoy cli ./scripts/drevops/info.sh "$@"

  db:
    usage: Open DB in Sequel Ace.
    cmd: |
      uname -a | grep -i -q darwin && mdfind -name 'Sequel Ace' 2>/dev/null |grep -q "Ace" \
      && DREVOPS_HOST_DB_PORT="$(docker port $(docker compose ps -q mariadb 2>/dev/null) 3306 2>/dev/null | cut -d : -f 2)" \
      && open "mysql://${MARIADB_USERNAME:-drupal}:${MARIADB_PASSWORD:-drupal}@127.0.0.1:${DREVOPS_HOST_DB_PORT}/drupal" -a "Sequel Ace" \
      || echo "Not a supported OS or Sequel Ace is not installed."

  # ----------------------------------------------------------------------------
  # Container commands.
  # ----------------------------------------------------------------------------

  up:
    usage: Build and start containers.
    cmd: |
      docker compose up -d "$@"
      if docker compose logs | grep -q "\[Error\]"; then exit 1; fi

  down:
    usage: Stop and remove containers, images, volumes and networks.
    cmd: |
      ahoy confirm "Running this command will remove your current database. Are you sure?" &&
      if [ -f "docker-compose.yml" ]; then docker compose down --remove-orphans --volumes > /dev/null 2>&1; fi

  start:
    usage: Start existing containers.
    cmd: docker compose start "$@"

  stop:
    usage: Stop running containers.
    cmd: docker compose stop "$@"

  restart:
    usage: Restart stopped or running containers.
    cmd: docker compose restart "$@"

  logs:
    usage: Show container logs for services.
    cmd: docker compose logs "$@"

  pull:
    usage: Pull latest container images.
    cmd: if [ ! -z "$(docker image ls -q)" ]; then docker image ls --format \"{{.Repository}}:{{.Tag}}\" | grep uselagoon/ | grep -v none | xargs -n1 docker pull -q | cat; fi

  cli:
    usage: Start a shell or run a command inside the CLI service container.
    # Drop into a shell if no arguments are supplied, otherwise run the command.
    # Environment variables are passed from the host and filtered by prefix.
    # Use \" (slash followed by a double quote) to escape double quotes in
    # arguments that contain spaces.
    cmd: |
      if [ "${#}" -ne 0 ]; then
        docker compose exec $(env | cut -f1 -d= | grep "TERM\|COMPOSE_\|GITHUB_\|DOCKER_\|DRUPAL_\|DREVOPS_" | sed 's/^/-e /') -T cli bash -c "$*"
      else
        docker compose exec $(env | cut -f1 -d= | grep "TERM\|COMPOSE_\|GITHUB_\|DOCKER_\|DRUPAL_\|DREVOPS_" | sed 's/^/-e /') cli bash
      fi

  composer:
    usage: Run Composer commands in the CLI service container.
    cmd: |
      ahoy cli " \
        if [ -n \"${GITHUB_TOKEN:-}\" ]; then export COMPOSER_AUTH='{\"github-oauth\": {\"github.com\": \"${GITHUB_TOKEN-}\"}}'; fi && \
        COMPOSER_MEMORY_LIMIT=-1 composer --ansi $@"

  drush:
    usage: Run Drush commands in the CLI service container. Use '--ws' for WorkSafe or '--cp' for Consumer Protection site.
    cmd: |
      uri="worksafe.docker.amazee.io"
      args=()
      show_info=true
      while [[ $# -gt 0 ]]; do
        case "$1" in
          --ws)
            uri="worksafe.docker.amazee.io"
            show_info=false
            shift
            ;;
          --cp)
            uri="consumerprotection.docker.amazee.io"
            show_info=false
            shift
            ;;
          *)
            args+=("$1")
            shift
            ;;
        esac
      done
      if [ "$show_info" = true ]; then
        echo "Note: This command supports site-specific execution:"
        echo "  ahoy drush --ws [command]  - Execute on WorkSafe site (worksafe.docker.amazee.io)"
        echo "  ahoy drush --cp [command]  - Execute on Consumer Protection site (consumerprotection.docker.amazee.io)"
        echo ""
        echo "Executing on default site (WorkSafe)..."
        echo ""
      fi
      ahoy cli "drush -l ${uri} ${args[*]}"

  flush-redis:
    usage: Flush Redis cache.
    cmd: docker compose exec redis redis-cli flushall

  # ----------------------------------------------------------------------------
  # Application commands.
  # ----------------------------------------------------------------------------

  login:
    usage: Login to a website. Use 'ws' for WorkSafe or 'cp' for Consumer Protection.
    cmd: |
      case "${1:-}" in
        ws)
          ahoy cli ./scripts/drevops/login.sh --uri=worksafe.docker.amazee.io
          ;;
        cp)
          ahoy cli ./scripts/drevops/login.sh --uri=consumerprotection.docker.amazee.io
          ;;
        "")
          echo "Available login options:"
          echo "  ahoy login ws  - Login to WorkSafe (worksafe.docker.amazee.io)"
          echo "  ahoy login cp  - Login to Consumer Protection (consumerprotection.docker.amazee.io)"
          echo ""
          echo "Proceeding with WorkSafe login..."
          echo ""
          ahoy cli ./scripts/drevops/login.sh --uri=worksafe.docker.amazee.io
          ;;
        *)
          ahoy cli ./scripts/drevops/login.sh --uri=worksafe.docker.amazee.io
          ;;
      esac

  download-db:
    usage: Download database.
    cmd: ./scripts/drevops/download-db.sh

  reload-db:
    usage: Reload the database container using local database image.
    cmd: |
      ahoy confirm "Running this command will replace your current database. Are you sure?" &&
      docker compose rm --force --stop --volumes mariadb && \
        ahoy up -- --build mariadb && \
        ahoy up wait_dependencies && \
        sleep 15 && \
        ahoy provision && \
        DREVOPS_SHOW_LOGIN=1 ahoy info

  provision:
    usage: Provision a site from the database dump or profile.
    cmd: ahoy cli ./scripts/drevops/provision.sh

  import-config-dev:
    usage: Import configuration from the config/dev directory.
    cmd: docker compose exec -it cli drush cim -y --partial --source=/app/config/dev/

  export-db:
    usage: Export database dump or database image (if DREVOPS_DB_IMAGE variable is set).
    cmd: ./scripts/drevops/export-db.sh "$@"

  pull-db:
    usage: Download database image with the latest nightly dump. Run "ahoy reload-db" to reload DB in the running stack.
    cmd: \[ -n "${DREVOPS_DB_IMAGE}" \] && docker pull ${DREVOPS_DB_IMAGE} || true

  reset:
    usage: "Remove containers, all build files. Use with `hard` to reset repository to the last commit."
    cmd: |
      ahoy confirm "All containers and build files will be removed. Proceed?" &&
      AHOY_CONFIRM_RESPONSE=y ahoy down && ./scripts/drevops/reset.sh "$@"

  fei:
    usage: Install front-end assets.
    cmd: ahoy cli "npm --prefix ${DREVOPS_WEBROOT}/themes/custom/demirs_ws install &&
      npm --prefix ${DREVOPS_WEBROOT}/themes/custom/demirs_cp install"

  fe:
    usage: Build front-end assets.
    cmd: ahoy cli "cd /app/${DREVOPS_WEBROOT}/themes/custom/demirs_ws && npm run build &&
        cd /app/${DREVOPS_WEBROOT}/themes/custom/demirs_cp && npm run build"

  fed:
    usage: Build front-end assets for development.
    cmd: ahoy cli "cd ${DREVOPS_WEBROOT}/themes/custom/${DRUPAL_THEME} && npm run build-dev"

  few:
    usage: Watch front-end assets during development.
    cmd: |
      ahoy cli "pkill -9 -f grunt" || true
      ahoy cli "cd ${DREVOPS_WEBROOT}/themes/custom/${DRUPAL_THEME} && npm run watch"

  lint:
    usage: Lint back-end and front-end code.
    cmd: ahoy lint-be && ahoy lint-fe

  lint-be:
    usage: Lint back-end code.
    cmd: |
      ahoy cli vendor/bin/phpcs
      ahoy cli vendor/bin/phpstan
      docker compose exec -T cli bash -c "XDEBUG_MODE=off vendor/bin/rector --debug --ansi --memory-limit=2G --no-progress-bar --clear-cache --dry-run"
      ahoy cli vendor/bin/phpmd . text phpmd.xml

  lint-fe:
    usage: Lint front-end code.
    cmd: |
      ahoy cli vendor/bin/twigcs
      ahoy cli "npm run --prefix \${DREVOPS_WEBROOT}/themes/custom/\${DRUPAL_THEME} lint"

  lint-fix:
    usage: Fix lint issues of back-end and front-end code.
    cmd: |
      docker compose exec -T cli bash -c "XDEBUG_MODE=off vendor/bin/rector --debug --ansi --memory-limit=2G --no-progress-bar --clear-cache"
      ahoy cli vendor/bin/phpcbf

  test:
    usage: Run all tests.
    cmd: ahoy test-unit && ahoy test-kernel && ahoy test-functional && ahoy test-bdd

  test-unit:
    usage: Run PhpUnit unit tests.
    cmd: ahoy cli vendor/bin/phpunit --testsuite=unit "$@"

  test-kernel:
    usage: Run PhpUnit kernel tests.
    cmd: ahoy cli vendor/bin/phpunit --testsuite=kernel "$@"

  test-functional:
    usage: Run PhpUnit functional tests.
    cmd: ahoy cli vendor/bin/phpunit --testsuite=functional "$@"

  test-bdd:
    usage: Run BDD tests.
    cmd: ahoy cli php -d memory_limit=-1 vendor/bin/behat --colors "$@"

  test-link-migration:
    usage: Run only link migration PHPUnit tests (both unit and kernel tests)
    cmd: docker compose exec cli /app/web/modules/custom/demirs_migrate_announcements/tests/run_link_migration_tests.sh

  debug:
    usage: Enable PHP Xdebug.
    cmd: ahoy cli php -v | grep -q Xdebug || XDEBUG_ENABLE=true ahoy up cli php nginx && ahoy cli php -v | grep -q Xdebug && echo "Enabled debug configuration. Use 'ahoy up' to disable."

  deploy:
    usage: Run remote deployment procedures.
    cmd: |
      ahoy confirm "Deployment usually runs in CI. Are you sure you want to proceed with manual deployment? (Run as ahoy deploy [type1,[type2..]], where [type] is 'code', 'container_registry', 'webhook')" &&
      ./scripts/drevops/deploy.sh "$@"

  github-labels:
    usage: Update project's GitHub labels.
    cmd: ./scripts/drevops/github-labels.sh "$@"

  doctor:
    usage: Find problems with current project setup.
    cmd: ./scripts/drevops/doctor.sh "$@"

  update-scaffold:
    usage: Update DrevOps stack.
    cmd: |
      ahoy confirm "Some committed files may become overwritten. Proceed?" &&
      ./scripts/drevops/update-scaffold.sh $@

  local:
    usage: Custom local commands. See `ahoy local help`.
    cmd: |
      if [ -f .ahoy.local.yml ]; then
        ahoy -f ".ahoy.local.yml" "$@"
      else
        echo ".ahoy.local.yml does not exist."
        echo "Copy .ahoy.local.example.yml to .ahoy.local.yml and rerun this command.";
      fi

  # ----------------------------------------------------------------------------
  # Utilities.
  # ----------------------------------------------------------------------------
  confirm:
    cmd: |
      if [ -z "${AHOY_CONFIRM_RESPONSE}" ]; then
        read -r -p ">> $1 [y/N] " AHOY_CONFIRM_RESPONSE
        [ "${AHOY_CONFIRM_RESPONSE}" = "y" ] || [ "${AHOY_CONFIRM_RESPONSE}" = true ] || ( echo "The operation was canceled." && exit 1 )
      else
        echo ">> $1 [y/N] ${AHOY_CONFIRM_RESPONSE}" \
        && if [ "${AHOY_CONFIRM_WAIT_SKIP}" != "1" ]; then echo "Waiting for 3 seconds... Press Ctrl+C to cancel."; sleep 3; fi
      fi
    hide: true

# Override entrypoint to alter default behaviour of Ahoy.
entrypoint:
  - bash
  - -c
  # Exit the script if any statement returns a non-true return value.
  - -e
  # Read variables from .env file, respecting existing values.
  # - Used to load and pass updated environment variables' values into already
  #   running containers.
  # - Use `ahoy up cli` in cases when changes require container restart.
  - |
    t=$(mktemp) && export -p > "$t" && set -a && . ./.env && if [ -f ./.env.local ];then . ./.env.local;fi && set +a && . "$t" && rm "$t" && unset t
    bash -e -c "$0" "$@"
  - '{{cmd}}'
  - '{{name}}'

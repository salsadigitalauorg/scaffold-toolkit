version: '2.1'

################################################################################
# VARIABLES
################################################################################

aliases:
  #-----------------------------------------------------------------------------
  # Per-project variables.
  #-----------------------------------------------------------------------------

  # SSH key fingerprint to download the database.
  - &db_ssh_fingerprint "${SCAFFOLD_TOOLKIT_SSH_FINGERPRINT}"

  # SSH key fingerprint to deploy code.
  - &deploy_ssh_fingerprint "${SCAFFOLD_TOOLKIT_SSH_FINGERPRINT}"

  # SSH key fingerprint to deploy code.
  # This SSH key is used to push Drupal configuration changes to the repo.
  - &renovate_ssh_fingerprint "${SCAFFOLD_TOOLKIT_SSH_RENOVATE_FINGERPRINT}"

  # Timezone of the runner container to ensure that DB cache key uses correct date.
  # @see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  # Replace this timezone with your own.
  - &timezone "Australia/Melbourne"

  # Number of parallel jobs to run. Applies to 'build' job only.
  - &parallelism 2

  # Make sure that correct repository is specified or bot will go
  # through all repositories that a RENOVATE_TOKEN token has access to.
  - &renovatebot_repository '${CIRCLE_PROJECT_REPONAME}'
  # The author details to use for commits made by RenovateBot.
  - &renovatebot_git_author 'Deployer robot <deployer@salsa.digital>'
  # The schedule to run RenovateBot on. Defaults to running twice a day.
  - &renovatebot_schedule "5 18,19,20,21,22,23,0,1,2,3,4,5 * * *"
  # Set to 'false' (without single quotes) once the setup is complete and
  # the bot ran at least once without errors.
  - &renovatebot_dry_run false
  # The branch to run RenovateBot on.
  - &renovatebot_branch master

  #-----------------------------------------------------------------------------
  # Optional variables.
  #-----------------------------------------------------------------------------

  # CI runner resource class.
  # @see https://circleci.com/docs/2.0/configuration-reference/#resource_class
  # Change to 'large' for faster builds.
  - &resource_class medium

  # Docker Layer Caching allows to significantly speed up builds by caching
  # images built during previous runs.
  # @see https://circleci.com/docs/2.0/docker-layer-caching/
  # Change to 'true' (without single quotes) to enable.
  - &docker_layer_caching false

  # The granularity of the database cache age: the cache will be refreshed if
  # the current date is different from the cache timestamp.
  # Refer to `date` command for possible values.
  - &drevops_ci_db_cache_timestamp +%Y%m%d
  # Use previous database caches on this branch as a fallback if the above cache
  # does not match (for example, the cache is available only from the previous
  # day). If "no" is set, the cache will be rebuilt from scratch.
  # Allowed values are "yes" or "no" (include enclosing double quotes).
  - &drevops_ci_db_cache_fallback "yes"

  # Which branch to use for a source of the DB caches. Usually, it is the default
  # project branch or *nightly_db_branch (see below).
  - &drevops_ci_db_cache_branch "master"

  # Database cache directory.
  - &db_cache_dir /root/project/.data

  # Schedule to run nightly database build (to cache the database for the next day).
  # Defaults to 4am UTC (make sure to adjust for your time zone).
  - &nightly_db_schedule "0 18 * * *"

  # The branch used for nightly builds.
  - &nightly_db_branch "master"

  # Set the location of Drupal configuration folder for export, for renovatebot.
  - &drupal_config_path "config/default"

  # Set date for database cache duration in renovatebot.
  - &renovatebot_ci_db_cache_timestamp +%Y%m%d%((H/8))

  - &runner_config
    working_directory: &working_directory ~/project
    environment:
      DREVOPS_DB_DOWNLOAD_SSH_FINGERPRINT: *db_ssh_fingerprint
      DREVOPS_DEPLOY_SSH_FINGERPRINT: *deploy_ssh_fingerprint
    docker:
      # Using the 'runner' container where each job will be executed.
      # This container has all the necessary tools to run a dockerized environment.
      # @see https://github.com/drevops/ci-runner
      # @see https://hub.docker.com/repository/docker/drevops/ci-runner/tags?page=1&ordering=last_updated
      - image: drevops/ci-runner:24.1.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          # Set runner timezone to ensure that executed operations use correct timestamps.
          TZ: *timezone
          # Set runner terminal capabilities.
          TERM: xterm-256color
          # How often to refresh the cache of the DB dump. Refer to `date` command.
          DREVOPS_CI_DB_CACHE_TIMESTAMP: *drevops_ci_db_cache_timestamp
          # Use cache fallback if the above timestamp does not match.
          DREVOPS_CI_DB_CACHE_FALLBACK: *drevops_ci_db_cache_fallback
          # Which branch to use as a source of DB caches.
          DREVOPS_CI_DB_CACHE_BRANCH: *drevops_ci_db_cache_branch
          # Directory to store test results.
          DREVOPS_CI_TEST_RESULTS: &test_results /tmp/tests
          # Directory to store test artifacts.
          DREVOPS_CI_ARTIFACTS: &artifacts /tmp/artifacts
          # Check only minimal stack requirements.
          DREVOPS_DOCTOR_CHECK_MINIMAL: 1
          # Directory to store code exported between jobs.
          DREVOPS_EXPORT_CODE_DIR: &drevops_build_export_dir /tmp/workspace/code
          # Directory to use for artifact deployments.
          DREVOPS_DEPLOY_ARTIFACT_SRC: *drevops_build_export_dir
          # Source code location for artifact deployments.
          DREVOPS_DEPLOY_ARTIFACT_ROOT: *working_directory
          # Report file location for artifact deployments.
          DREVOPS_DEPLOY_ARTIFACT_REPORT_FILE: /tmp/artifacts/deployment_report.txt
    resource_class: *resource_class

  - &runner_config_renovatebot
    working_directory: &working_directory ~/project
    environment:
      DREVOPS_DB_DOWNLOAD_SSH_FINGERPRINT: *db_ssh_fingerprint
      DREVOPS_DEPLOY_SSH_FINGERPRINT: *deploy_ssh_fingerprint
      DREVOPS_DB_DOWNLOAD_REFRESH: 1
      DREVOPS_DB_FILE: db_renovate.sql
      DRUPAL_CONFIG_PATH: *drupal_config_path
      DREVOPS_DB_DOWNLOAD_FORCE: 1
      DREVOPS_DB_DOWNLOAD_PROCEED: 1
    docker:
      # Using the 'runner' container where each job will be executed.
      # This container has all the necessary tools to run a dockerized environment.
      # @see https://github.com/drevops/ci-runner
      # @see https://hub.docker.com/repository/docker/drevops/ci-runner/tags?page=1&ordering=last_updated
      - image: drevops/ci-runner:24.1.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          # Set runner timezone to ensure that executed operations use correct timestamps.
          TZ: *timezone
          # Set runner terminal capabilities.
          TERM: xterm-256color
          # How often to refresh the cache of the DB dump. Refer to `date` command.
          RENOVATEBOT_CI_DB_CACHE_TIMESTAMP: *renovatebot_ci_db_cache_timestamp
          # Use cache fallback if the above timestamp does not match.
          DREVOPS_CI_DB_CACHE_FALLBACK: *drevops_ci_db_cache_fallback
          # Which branch to use as a source of DB caches.
          DREVOPS_CI_DB_CACHE_BRANCH: *drevops_ci_db_cache_branch
          # Directory to store test results.
          DREVOPS_CI_TEST_RESULTS: &test_results /tmp/tests
          # Directory to store test artifacts.
          DREVOPS_CI_ARTIFACTS: &artifacts /tmp/artifacts
          # Check only minimal stack requirements.
          DREVOPS_DOCTOR_CHECK_MINIMAL: 1
          # Directory to store code exported between jobs.
          DREVOPS_EXPORT_CODE_DIR: &drevops_build_export_dir /tmp/workspace/code
          # Directory to use for artifact deployments.
          DREVOPS_DEPLOY_ARTIFACT_SRC: *drevops_build_export_dir
          # Source code location for artifact deployments.
          DREVOPS_DEPLOY_ARTIFACT_ROOT: *working_directory
          # Report file location for artifact deployments.
          DREVOPS_DEPLOY_ARTIFACT_REPORT_FILE: /tmp/artifacts/deployment_report.txt
          DREVOPS_DB_FILE: db_renovate.sql
          DREVOPS_DB_DOWNLOAD_REFRESH: 1
    resource_class: *resource_class

  # Set up remote Docker.
  - &step_setup_remote_docker
    setup_remote_docker:
      docker_layer_caching: *docker_layer_caching
      version: default

  # Set up Docker network.
  - &step_setup_docker_network
    run: docker network prune -f >/dev/null 2>&1 && docker network inspect amazeeio-network >/dev/null 2>&1 || docker network create amazeeio-network >/dev/null 2>&1 || true

  # Process the codebase to be run in CI environment.
  - &step_process_codebase
    run:
      name: Process codebase to run in CI
      command: |
        find . -name "docker-compose.yml" -print0 | xargs -0 -I {} sh -c "sed -i -e ''/###/d'' {} && sed -i -e ''s/##//'' {}"
        mkdir -p /tmp/workspace/code

################################################################################
# JOBS
################################################################################

jobs:
  database: &job-database
    <<: *runner_config
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints:
            - *db_ssh_fingerprint
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - *step_setup_docker_network
      - run:
          name: Create cache keys for database caching as files
          command: |
            echo "$DREVOPS_CI_DB_CACHE_BRANCH" | tee /tmp/db_cache_branch
            echo "${DREVOPS_CI_DB_CACHE_FALLBACK/no/$CIRCLE_BUILD_NUM}" | tee /tmp/db_cache_fallback
            echo "$(date $DREVOPS_CI_DB_CACHE_TIMESTAMP)" | tee /tmp/db_cache_timestamp
            echo "yes" | tee /tmp/db_cache_fallback_yes
            echo
            echo 'v1.19.2-db10-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback" }}-{{ checksum "/tmp/db_cache_timestamp" }}'

      - restore_cache:
          keys:
            # Restore DB cache based on the cache strategy set by the cache keys below.
            #
            # @see https://circleci.com/docs/2.0/caching/#restoring-cache
            #
            # Change 'v1' to 'v2', 'v3' etc., commit and push to force cache reset.
            #
            # Lookup cache based on the default branch and a timestamp. Allows
            # to use cache from the very first build on the day (sanitized
            # database dump, for example).
            - v1.19.2-db10-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback" }}-{{ checksum "/tmp/db_cache_timestamp" }}
            #
            # Fallback to caching by default branch name only. Allows to use
            # cache from the branch build on the previous day.
            - v1.19.2-db10-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback" }}-
      - run:
          name: Download DB
          command: DREVOPS_DB_DOWNLOAD_SEMAPHORE=/tmp/download-db ./scripts/drevops/download-db.sh
          no_output_timeout: 30m
      - run:
          name: Export DB after download
          command: |
            if [ -f /tmp/download-db ]; then
              DREVOPS_PROVISION_POST_OPERATIONS_SKIP=1 ./scripts/drevops/build.sh
              grep -q ^DREVOPS_DB_DOCKER_IMAGE .env && rm .data/db.sql || true
              ./scripts/drevops/export-db.sh db.sql
            else
              echo "==> Database download semaphore file is missing. DB export will not proceed."
            fi
          no_output_timeout: 30m
      - save_cache:
          # Save cache per default branch and the timestamp.
          # The cache will not be saved if it already exists.
          # Note that the cache fallback flag is enabled for this case in order
          # to save cache even if the fallback is not used when restoring it.
          key: v1.19.2-db10-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback_yes" }}-{{ checksum "/tmp/db_cache_timestamp" }}
          paths:
            - *db_cache_dir

  database_renovatebot: &job-database
    <<: *runner_config_renovatebot
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints:
            - *db_ssh_fingerprint
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - *step_setup_docker_network
      - run:
          name: Create cache keys for database caching as files
          command: |
            echo "$DREVOPS_CI_DB_CACHE_BRANCH" | tee /tmp/db_cache_branch
            echo "${DREVOPS_CI_DB_CACHE_FALLBACK/no/$CIRCLE_BUILD_NUM}" | tee /tmp/db_cache_fallback
            echo "$(date $RENOVATEBOT_CI_DB_CACHE_TIMESTAMP)" | tee /tmp/db_cache_timestamp
            echo "yes" | tee /tmp/db_cache_fallback_yes
            echo
            echo 'v1.00.3-db10-renovate{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback" }}-{{ checksum "/tmp/db_cache_timestamp" }}'

      - run:
          name: Download fresh DB
          command: DREVOPS_DB_DOWNLOAD_SEMAPHORE=/tmp/download-db DREVOPS_DB_DOWNLOAD_REFRESH=1 ./scripts/drevops/download-db.sh
          no_output_timeout: 30m
      - save_cache:
          # Save cache per default branch and the timestamp.
          # The cache will not be saved if it already exists.
          # Note that the cache fallback flag is enabled for this case in order
          # to save cache even if the fallback is not used when restoring it.
          key: v1.00.3-db10-renovate-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback_yes" }}-{{ checksum "/tmp/db_cache_timestamp" }}
          paths:
            - *db_cache_dir

  # Nightly database job. Same as above, but with additional variables set.
  database-nightly:
    <<: *job-database
    environment:
      DREVOPS_DB_DOWNLOAD_SSH_FINGERPRINT: *db_ssh_fingerprint
      DREVOPS_DEPLOY_SSH_FINGERPRINT: *deploy_ssh_fingerprint
      # Enforce fresh DB build (do not rely on fallback caches).
      DREVOPS_CI_DB_CACHE_FALLBACK: 'no'
      # Always use fresh base image for the database.
      DREVOPS_DB_DOCKER_IMAGE_BASE: drevops/mariadb-drupal-data:23.4.2
      # Deploy docker image (if DREVOPS_DB_EXPORT_DOCKER_IMAGE storage is used).
      DREVOPS_EXPORT_DB_DOCKER_DEPLOY_PROCEED: 1

  # Build and test is a second step of the build. The testing is performed
  # within the same job to save time on provisioning during the job.
  build: &job_build
    <<: *runner_config
    parallelism: *parallelism
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - *step_setup_docker_network
      - run:
          name: Set cache keys for database caching
          command: |
            echo "$DREVOPS_CI_DB_CACHE_BRANCH" | tee /tmp/db_cache_branch
            echo "yes" | tee /tmp/db_cache_fallback_yes
            echo "$(date $DREVOPS_CI_DB_CACHE_TIMESTAMP)" | tee /tmp/db_cache_timestamp
      - restore_cache:
          keys:
            # Use cached artifacts from previous builds of this branch.
            # @see https://circleci.com/docs/2.0/caching/#restoring-cache
            - v1.19.2-db10-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback_yes" }}-{{ checksum "/tmp/db_cache_timestamp" }}
            - v1.19.2-db10-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback_yes" }}-
      - run:
          name: Build site
          command: ./scripts/drevops/build.sh
          no_output_timeout: 30m
      - run:
          name: Lint Dockerfiles with Hadolint
          command: |
            for file in $(find . -name 'Dockerfile' -o -name '*.dockerfile'); do
              echo "Linting ${file}" && cat "${file}" | docker run --rm -i hadolint/hadolint || [ "${DREVOPS_CI_HADOLINT_IGNORE_FAILURE:-0}" -eq 1 ]
            done
      - run:
          name: Lint code with PHPCS
          command: docker compose exec -T cli vendor/bin/phpcs || [ "${DREVOPS_CI_PHPCS_IGNORE_FAILURE:-0}" -eq 1 ]
      - run:
          name: Lint code with PHPStan
          command: docker compose exec -T cli vendor/bin/phpstan || [ "${DREVOPS_CI_PHPSTAN_IGNORE_FAILURE:-0}" -eq 1 ]
      - run:
          name: Lint code with Rector
          command: docker compose exec -T cli vendor/bin/rector --dry-run || [ "${DREVOPS_CI_RECTOR_IGNORE_FAILURE:-0}" -eq 1 ]
      - run:
          name: Lint code with PHPMD
          command: docker compose exec -T cli vendor/bin/phpmd . text phpmd.xml || [ "${DREVOPS_CI_PHPMD_IGNORE_FAILURE:-0}" -eq 1 ]
      - run:
          name: Lint code with Twigcs
          command: docker compose exec -T cli vendor/bin/twigcs || [ "${DREVOPS_CI_TWIGCS_IGNORE_FAILURE:-0}" -eq 1 ]
      - run:
          name: Lint code with NPM linters
          command: docker compose exec -T cli bash -c "npm run --prefix \${DREVOPS_WEBROOT}/themes/custom/\${DRUPAL_THEME} lint" || [ "${DREVOPS_CI_NPM_LINT_IGNORE_FAILURE:-0}" -eq 1 ]
      - run:
          name: Test with PHPUnit
          command: |
            XDEBUG_ENABLE=true docker compose up -d cli php nginx # Restart stack with XDEBUG enabled for coverage.
            docker compose exec -T -e XDEBUG_MODE=coverage cli vendor/bin/phpunit || [ "${DREVOPS_CI_PHPUNIT_IGNORE_FAILURE:-0}" -eq 1 ]
            docker compose up -d cli php nginx # Restart stack without XDEBUG enabled for coverage.
      - run:
          name: Test with Behat
          command: |
            if [ "${CIRCLE_NODE_TOTAL:-1}" -gt 1 ]; then export DREVOPS_CI_BEHAT_PROFILE="${DREVOPS_CI_BEHAT_PROFILE:-p${CIRCLE_NODE_INDEX}}"; fi
            echo "Running with ${DREVOPS_CI_BEHAT_PROFILE:-default} profile"
            docker compose exec -T cli php -d memory_limit=-1 vendor/bin/drush -y config-set tfa.settings enabled 0
            docker compose exec -T cli php -d memory_limit=-1 vendor/bin/behat --colors --strict --profile="${DREVOPS_CI_BEHAT_PROFILE:-default}" || \
              docker compose exec -T cli php -d memory_limit=-1 vendor/bin/behat --colors --strict --rerun --profile="${DREVOPS_CI_BEHAT_PROFILE:-default}" || \
              [ "${DREVOPS_CI_BEHAT_IGNORE_FAILURE:-0}" -eq 1 ]
            docker compose exec -T cli php -d memory_limit=-1 vendor/bin/drush -y config-set tfa.settings enabled 1
          no_output_timeout: 30m
      - run:
          name: Process test logs and artifacts
          command: |
            if docker compose ps --services --filter "status=running" | grep -q cli; then
              mkdir -p "${DREVOPS_CI_TEST_RESULTS}" && docker compose cp cli:/app/.logs/test_results/. "${DREVOPS_CI_TEST_RESULTS}/"
              mkdir -p "${DREVOPS_CI_ARTIFACTS}" && docker compose cp cli:/app/.logs/. "${DREVOPS_CI_ARTIFACTS}/"
            fi
          when: always
      - store_test_results:
          path: *test_results
      - store_artifacts:
          path: *artifacts
      - run:
          name: Upload code coverage reports to Codecov
          command: if [ -f /tmp/artifacts/coverage ]; then codecov -Z -s /tmp/artifacts/coverage; fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - code

  # Build for the renovatebot, allow configuration expport.
  build_renovatebot: &job_build
    <<: *runner_config_renovatebot
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints:
            - *renovate_ssh_fingerprint
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - *step_setup_docker_network
      - run:
          name: Set cache keys for database caching
          command: |
            echo "$DREVOPS_CI_DB_CACHE_BRANCH" | tee /tmp/db_cache_branch
            echo "yes" | tee /tmp/db_cache_fallback_yes
            echo "$(date $DREVOPS_CI_DB_CACHE_TIMESTAMP)" | tee /tmp/db_cache_timestamp
      - restore_cache:
          keys:
            # Use cached artifacts from previous builds of this branch.
            # @see https://circleci.com/docs/2.0/caching/#restoring-cache
            - v1.00.3-db10-renovate-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback_yes" }}-{{ checksum "/tmp/db_cache_timestamp" }}
            - v1.00.3-db10-renovate-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback_yes" }}-
      - run:
          name: Debug - List .data directory
          command: ls -la /root/project/.data
      - run:
          name: Build site
          command: DREVOPS_DB_FILE=db_renovate.sql ./scripts/custom/renovatebot-build.sh
          no_output_timeout: 30m
      - run:
          name: Process test logs and artifacts
          command: |
            if docker compose ps --services --filter "status=running" | grep -q cli; then
              docker compose cp cli:/app/config/default/. "/root/project/config/default/"
            fi
          when: always
      - run:
          name: Commit and Push Configuration Changes
          command: |
            git config user.email "deployer@salsa.digital"
            git config user.name "salsadeploy"
            echo "Drupal config path: $DRUPAL_CONFIG_PATH"

            # Check for changes in the config directory
            CONFIG_CHANGES=$(git status --porcelain "$DRUPAL_CONFIG_PATH")

            # Check if there are any changes in the config directory
            if [ -n "$CONFIG_CHANGES" ]; then
              echo "Changes detected in $DRUPAL_CONFIG_PATH:"
              echo "$CONFIG_CHANGES"

              git add "$DRUPAL_CONFIG_PATH"

              # Commit and push the changes
              git commit -m "Update Drupal configuration in $DRUPAL_CONFIG_PATH"
              git fetch origin
              git pull origin $CIRCLE_BRANCH
              git push --set-upstream origin $CIRCLE_BRANCH
              echo "Changes in $DRUPAL_CONFIG_PATH committed and pushed."
            else
              echo "No changes detected in $DRUPAL_CONFIG_PATH"
              # Check for changes in other files
              OTHER_CHANGES=$(git status --porcelain)
              if [ -n "$OTHER_CHANGES" ]; then
                echo "Changes detected in other files:"
                echo "$OTHER_CHANGES"
                echo "These changes will not be committed."
              else
                echo "No changes detected in any files."
              fi
            fi

  # Deploy primary branches.
  deploy: &job_deploy
    <<: *runner_config
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - checkout
      - *step_process_codebase
      - run:
          command: |
            DREVOPS_DEPLOY_BRANCH="$CIRCLE_BRANCH" \
            DREVOPS_DEPLOY_PR="$(echo $CIRCLE_PULL_REQUEST | cut -d'/' -f 7)" \
            DREVOPS_DEPLOY_PR_HEAD=$CIRCLE_SHA1 \
            ./scripts/drevops/deploy.sh
          no_output_timeout: 30m
      - store_artifacts:
          path: *artifacts

  # Deploy tags.
  deploy-tags: &job-deploy-tags
    <<: *runner_config
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - checkout
      - *step_process_codebase
      - run:
          command: DREVOPS_DEPLOY_MODE="tag" ./scripts/drevops/deploy.sh
          no_output_timeout: 30m
      - store_artifacts:
          path: *artifacts

  # Self-hosted RenovateBot.
  # Add RENOVATE_TOKEN as an environment variable with GitHub access token in UI.
  renovatebot-self-hosted:
    docker:
      - image: renovate/renovate:36.108.0
        environment:
          RENOVATE_PLATFORM: 'github'
          RENOVATE_AUTODISCOVER: false
          RENOVATE_DEPENDENCY_DASHBOARD: true
          RENOVATE_DEPENDENCY_DASHBOARD_TITLE: 'RenovateBot Dependency Dashboard (CircleCI-hosted)'
          RENOVATE_REPOSITORIES: *renovatebot_repository
          RENOVATE_GIT_AUTHOR: *renovatebot_git_author
          RENOVATE_DRY_RUN: *renovatebot_dry_run
          LOG_LEVEL: debug
    steps:
      - checkout
      - run: renovate-config-validator
      - run: renovate

  # Security scanning job to detect secrets and sensitive information
  scan_secrets:
    <<: *runner_config
    steps:
      - checkout
      - *step_setup_remote_docker
      - run:
          name: Make scripts executable
          command: chmod +x ./scripts/custom/scan-secrets.sh
      - run:
          name: Scan for secrets
          command: ./scripts/custom/scan-secrets.sh
          # Allow the script to fail but still capture artifacts
          when: always
      - store_artifacts:
          path: /tmp/artifacts/security-scan
          destination: security-scan
      - run:
          name: Check scan results
          command: |
            if [ -f /tmp/artifacts/security-scan/scan_exit_code ]; then
              exit_code=$(cat /tmp/artifacts/security-scan/scan_exit_code)
              if [ "$exit_code" -ne 0 ]; then
                echo "Security scan failed with exit code $exit_code"
                exit $exit_code
              fi
            fi


################################################################################
# WORKFLOWS
################################################################################

workflows:
  version: 2
  # Commit workflow. Runs for every commit push to the remote repository.
  commit:
    jobs:
      - scan_secrets:
          filters:
            tags:
              only: /.*/
      - database:
          requires:
            - scan_secrets
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - database
          filters:
            tags:
              only: /.*/
      - database_renovatebot:
          requires:
            - build
          filters:
            branches:
              only: /^(deps\/.*)$/
      - build_renovatebot:
          requires:
            - database_renovatebot
          filters:
            branches:
              only: /^(deps\/.*)$/
      - deploy:
          requires:
            - build
          filters:
            branches:
              # Allowed branches:
              # - main, master, develop, ci, cisomething
              # - deps/*
              # - feature/description, feature/123-description
              # - release/123.456.789, release/123.456.789-rc.123 (per https://semver.org/)
              # - release/2023-04-17, release/2023-04-17.123 (date-based)
              # - hotfix/123.456.789, hotfix/123.456.789-rc.1213 (per https://semver.org/)
              # - hotfix/2023-04-17, hotfix/2023-04-17.123 (date-based)
              only: /^(production|master|develop|renovate)$|^deps\/.*|^deps-gha\/.*|^(release|hotfix)\/[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$|^(release|hotfix)\/[0-9]{4}-[0-9]{2}-[0-9]{2}(\.[0-9]+)?$/
            tags:
              ignore: /.*/
      - deploy-tags:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              # Allowed tags:
              # - 123.456.789, 123.456.789-rc.123 (per https://semver.org/)
              # - 2023-04-17, 2023-04-17.123 (date-based)
              only: /^[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$|^[0-9]{4}-[0-9]{2}-[0-9]{2}(\.[0-9]+)?$/


  # Nightly database workflow runs overnight to capture fresh database and cache it.
  nightly-db:
    triggers:
      - schedule:
          cron: *nightly_db_schedule
          filters:
            branches:
              only:
                - *nightly_db_branch
    jobs:
      - database-nightly

  # Self-hosted Renovatebot workflow.
  renovatebot-self-hosted:
    triggers:
      - schedule:
          cron: *renovatebot_schedule
          filters:
            branches:
              only:
                - *renovatebot_branch
    jobs:
      - renovatebot-self-hosted
